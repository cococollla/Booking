// <auto-generated />
using System;
using Booking.DAL.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Domain.Entities.Ground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GeneralDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Общее описание");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование");

                    b.Property<long>("OwenerId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("Photos")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasComment("Фотографии");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasComment("Цена за один timeSlot");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwenerId");

                    b.ToTable("Grounds");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Parameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasComment("Иконка");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasComment("Email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Номер телефона");

                    b.Property<string[]>("SocialNetworks")
                        .HasColumnType("text[]")
                        .HasComment("Социальные сети");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Booking.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AdditionalPrice")
                        .HasColumnType("numeric");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long?>("GroundId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GroundId");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("GroundParameter", b =>
                {
                    b.Property<long>("GroundsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParametersId")
                        .HasColumnType("bigint");

                    b.HasKey("GroundsId", "ParametersId");

                    b.HasIndex("ParametersId");

                    b.ToTable("GroundParameter");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Ground", b =>
                {
                    b.HasOne("Booking.Domain.Entities.Profile", "Owener")
                        .WithMany("Grounds")
                        .HasForeignKey("OwenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owener");
                });

            modelBuilder.Entity("Booking.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("Booking.Domain.Entities.Ground", null)
                        .WithMany("TimeSlots")
                        .HasForeignKey("GroundId");
                });

            modelBuilder.Entity("GroundParameter", b =>
                {
                    b.HasOne("Booking.Domain.Entities.Ground", null)
                        .WithMany()
                        .HasForeignKey("GroundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Domain.Entities.Parameter", null)
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booking.Domain.Entities.Ground", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Grounds");
                });
#pragma warning restore 612, 618
        }
    }
}
